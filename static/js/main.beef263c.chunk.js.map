{"version":3,"sources":["Assets/SVG/checked.svg","Assets/SVG/not-checked.svg","Assets/Actions/Actions.js","Assets/Components/Home.js","App.js","serviceWorker.js","Assets/Reducers/TaskReducer.js","Assets/Reducers/DoneTaskReducer.js","Assets/Reducers/CombineReducers.js","index.js"],"names":["module","exports","addTask","data","type","payload","removeTask","index","addDoneTask","task","sortToDoTasks","sortDoneTasks","Home","state","err","event","preventDefault","target","value","length","props","setState","taskHandler","sortList","this","tasks","completedTasks","className","onSubmit","placeholder","Button","variant","onClick","map","i","src","unchecked","alt","checked","Component","connect","store","dispatch","bindActionCreators","App","Boolean","window","location","hostname","match","defaultstate","combineReducers","action","splice","sort","a","b","toLowerCase","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.beef263c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checked.6ff8ef53.svg\";","module.exports = __webpack_public_path__ + \"static/media/not-checked.0b454429.svg\";","//2.action types\r\nexport const TODOTASKS = \"TODOTASKS\"\r\nexport const REMOVETASK = \"REMOVETASK\"\r\nexport const DONETASK = \"DONETASK\"\r\nexport const SORTTODOTASK = \"SORTTODOTASK\"\r\nexport const SORTDONETASK = \"SORTDONETASK\"\r\n\r\n//3.Action Creators\r\nexport const addTask = data => {\r\n    return{\r\n        type: TODOTASKS,\r\n        payload: data\r\n    }\r\n}\r\nexport const removeTask = index => {\r\n    return{\r\n        type: REMOVETASK,\r\n        payload: index\r\n    }\r\n}\r\nexport const addDoneTask = task => {\r\n    return{\r\n        type: DONETASK,\r\n        payload: task\r\n    }\r\n}\r\nexport const sortToDoTasks = () => {\r\n    return{\r\n        type: SORTTODOTASK        \r\n    }\r\n}\r\nexport const sortDoneTasks = () => {\r\n    return{\r\n        type: SORTDONETASK        \r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport checked from \"../SVG/checked.svg\"\r\nimport unchecked from \"../SVG/not-checked.svg\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport \"../Styles/home.css\"\r\nimport { connect } from \"react-redux\"\r\nimport { addTask, removeTask, addDoneTask, sortToDoTasks, sortDoneTasks } from \"../Actions/Actions\"\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        err: \"\"\r\n    }\r\n    addTask = (event) => {\r\n        event.preventDefault()\r\n        let task = event.target[0].value\r\n        let { err } = this.state\r\n        if (task.length == 0)\r\n            err = \"Please enter the task to be added\"\r\n        else if (task.length > 20)\r\n            err = \"Must be 20 characters or less\"\r\n        else {\r\n            err = \"\"\r\n            this.props.addTask(task)\r\n        }\r\n        this.setState({ err })\r\n    }\r\n    taskHandler = (index, task) => {\r\n        this.props.removeTask(index)\r\n        this.props.addDoneTask(task)\r\n    }\r\n    sortList = () => {\r\n        this.props.sortToDoTasks()\r\n        this.props.sortDoneTasks()\r\n    }\r\n    render() {\r\n        const { err } = this.state\r\n        const { tasks, completedTasks } = this.props\r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"container\">\r\n                    <div className=\"heading\">\r\n                        Tasks\r\n                    </div>\r\n                    <div className=\"form-container\">\r\n                        <form onSubmit={this.addTask}>\r\n                            <div>\r\n                                <input type=\"text\" placeholder=\" Add a task \" />                                \r\n                            </div>\r\n                            <Button variant=\"primary\" type=\"submit\">Add</Button>\r\n                            <Button variant=\"primary\" onClick={this.sortList}>Sort</Button>\r\n                        </form>\r\n                        {err.length > 0 && <div className=\"errmsg\">{err}</div>}\r\n                    </div>\r\n                    <div className=\"display\">\r\n                        <div className=\"list\">\r\n                            <h4>To-do</h4>\r\n                            {tasks.map((task, i) => {\r\n                                return (\r\n                                    <div className=\"todotask\" >\r\n                                        <img onClick={() => this.taskHandler(i, task)} src={unchecked} alt=\"unchecked logo\" />\r\n                                        <span>{task}</span>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            <h4>Completed</h4>\r\n                            {completedTasks.map((task, i) => {\r\n                                return (\r\n                                    <div className=\"completedtask\" >\r\n                                        <img src={checked} alt=\"checked logo\" />\r\n                                        <span>{task}</span>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        tasks: store.tasks,\r\n        completedTasks: store.completedTasks\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        { addTask, removeTask, addDoneTask, sortToDoTasks, sortDoneTasks }, dispatch\r\n    )\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React from 'react';\nimport Home from \"./Assets/Components/Home\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TODOTASKS} from \"../Actions/Actions\"\r\nimport {REMOVETASK} from \"../Actions/Actions\"\r\nimport {SORTTODOTASK} from \"../Actions/Actions\"\r\n\r\nlet defaultstate=[]\r\nexport default function TaskReducer(state = defaultstate, action){\r\n    switch(action.type){\r\n        case TODOTASKS: {\r\n            state = [...state, action.payload]\r\n            return state\r\n        }\r\n        case REMOVETASK: {            \r\n            state.splice(action.payload,1)\r\n            return state\r\n        }\r\n        case SORTTODOTASK: {            \r\n            state.sort((a,b) => a.toLowerCase() < b.toLowerCase() ? -1 : 1)\r\n            return [...state]\r\n        }\r\n        default: return state\r\n    }\r\n}","import {DONETASK,SORTDONETASK} from \"../Actions/Actions\"\r\n\r\nlet defaultstate=[]\r\nexport default function DoneTaskReducer(state = defaultstate, action){\r\n    switch(action.type){\r\n        case DONETASK: {\r\n            state = [...state, action.payload]\r\n            return state\r\n        }\r\n        case SORTDONETASK: {            \r\n            state.sort((a,b) => a.toLowerCase() < b.toLowerCase() ? -1 : 1)\r\n            return [...state]\r\n        }        \r\n        default: return state\r\n    }\r\n}","import { combineReducers } from \"redux\"\r\nimport tasks from \"./TaskReducer\"\r\nimport completedTasks from \"./DoneTaskReducer\"\r\n\r\nexport default combineReducers({\r\n    tasks: tasks,\r\n    completedTasks: completedTasks\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\"\nimport { createStore } from 'redux';\nimport reducer from \"./Assets/Reducers/CombineReducers\"\n\nconst store = createStore(reducer)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}